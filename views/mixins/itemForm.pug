mixin itemForm(item = {})
  form(action=(item._id ? `/edit/${item._id}` : `/add`) method="POST")
    label(for="name").block name
      span.purp *
    input(type="text" name="name" id="name" value=item.name).col-12.sm-col-8.md-col-6.field
    .mt2 stores where we get this item:
      .flex.flex-center
        each store in Object.keys(h.stores)
          input(type="checkbox" name="stores" id=`checkbox-${store}` value=store checked=(item.stores && item.stores.includes(store)))
          label(for=`checkbox-${store}`).mr2= h.stores[store].name
    .mt2 our default store of choice:
      .flex.flex-center
        each store in Object.keys(h.stores)
          input(type="radio" name="defaultStore" id=`radio-${store}` value=store checked=((item.defaultStore && item.defaultStore === store)) || false)
          label(for=`radio-${store}`).mr2= h.stores[store].name
    .flex.mt2
      .flex.flex-column
        - const storesWithAreas = {tj: 'TJ', moms: 'Moms'}
        each store in Object.keys(storesWithAreas)
          label(for=`${store}-area`).block #{storesWithAreas[store]} area
          input(type="number" id=`${store}-area` name=`${store}Area` disabled=(h.itemHasStore(item, store) ? false : true) value=(item[`${store}Area`])).block.field.w-90px.mb2
      .flex.flex-auto.ml2
        each store in h.storesAreas
          - let caption = store[0];
          - let storeName = store[0].split(' ')[0].toLowerCase();
            div(id=`${storeName}-areas-ref` hidden=((h.itemHasStore(item, storeName) ? false : true))).col-6.px2
              .overflow-scroll
                table(class="table-light overflow-hidden border rounded").mono
                  caption= caption
                  thead.bg-light-grey
                    tr
                      th(scope="col").fw400 area
                      th(scope="col").fw400 items
                  tbody.mono
                    each key in Object.keys(store[1]).sort()
                      tr
                        td= key
                        td= store[1][key]
    input.mt2.btn.btn-primary.bg-blue.fw400(type="submit" value="Save â†’")
    if (title.includes('Edit'))
      a.mt2.ml2.btn.btn-primary.bg-grey.fw400.hover-bg-red(href=`/delete/${item._id}` id="delete-btn") Delete!

    script.
      let tjStore = document.getElementById('checkbox-tj');
      let momsStore = document.getElementById('checkbox-moms');
      let tjArea = document.querySelector('input[name="tjArea"]');
      let momsArea = document.querySelector('input[name="momsArea"]');
      let tjAreasRef = document.getElementById('tj-areas-ref');
      let momsAreasRef = document.getElementById('moms-areas-ref');
      
      const mainStores = [tjStore, momsStore];

      mainStores.forEach(function(store) {
        store.addEventListener('change', function() {
          let storeArea = document.querySelector(`input[name="${this.value}Area"]`);
          let storeAreaRef = document.getElementById(`${this.value}-areas-ref`);
          return (this.checked === true)
            ? (storeArea.disabled = null, storeAreaRef.hidden = false)
            : (storeArea.disabled = 'disabled', storeAreaRef.hidden = true)
        })
      });

  //- mixins can accept a parameter, in this case the empty object `item` by default, and which you can pass from the template that calls the mixin an object with whatever data; the data of which can be used, in this case `#{item.name}`
