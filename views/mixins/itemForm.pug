mixin itemForm(item = {})
  form(action=item._id ? `/edit/${item._id}` : `/add` method="POST")
    //- the /${item._id || ''} was added to double up the use of this template.
    //- In this way, this same template can be used for creating a new item,
    //- or editing an existing item. If there is no _id property on
    //- the item object, then the action will go to the route for /add/
    label(for="name").block name
      span.red *
    input(type="text" name="name" id="name" value=item.name).col-12.sm-col-8.md-col-6.field
    .mt2 stores where we get this item:
      .flex.flex-center
        each store in Object.keys(h.stores)
          input(type="checkbox" name="stores" id=`checkbox-${store}` value=store checked=((item.stores && item.stores.includes(store)) || false))
          label(for=`checkbox-${store}`).mr2= h.stores[store].name
    .mt2 our default store of choice:
      .flex.flex-center
        each store in Object.keys(h.stores)
          input(type="radio" name="defaultStore" id=`radio-${store}` value=store checked=((item.defaultStore && item.defaultStore === store)) || false)
          label(for=`radio-${store}`).mr2= h.stores[store].name
    .flex.mt2
      .flex.flex-column
        label(for="tj-area").block TJ area
        input(style="width: 90px;" type="number" id="tj-area" name="tjArea" disabled=h.hasStoreArea(item, store)).block.field
        label(for="moms-area").block.mt2 Moms area
        input(style="width: 90px;" type="number" id="moms-area" name="momsArea" disabled=h.hasStoreArea(item, store)).block.field
      .flex.flex-auto.ml2
        each store in h.storesAreas
          div(id=`${store[0].split(' ')[0].toLowerCase()}-areas-ref` hidden=h.hasStoreArea(item, store)).col-6.px2
            .overflow-scroll
              table(class="table-light overflow-hidden border rounded").mono
                caption= store[0]
                thead.bg-grey
                  tr
                    th(scope="col").fw400 area
                    th(scope="col").fw400 items
                tbody.mono
                  each key in Object.keys(store[1]).sort()
                    tr
                      td= key
                      td= store[1][key]
    input.mt2.btn.btn-primary.bg-blue.fw400(type="submit" value="Save â†’")

    script.
      let tjStore = document.getElementById('checkbox-tj');
      let momsStore = document.getElementById('checkbox-moms');
      let tjArea = document.querySelector('input[name="tjArea"]');
      let momsArea = document.querySelector('input[name="momsArea"]');
      let tjAreasRef = document.getElementById('tj-areas-ref');
      let momsAreasRef = document.getElementById('moms-areas-ref');
      
      const mainStores = [tjStore, momsStore];

      mainStores.forEach(function(store) {
        store.addEventListener('change', function() {
          let storeArea = document.querySelector(`input[name="${this.value}Area"]`);
          let storeAreaRef = document.getElementById(`${this.value}-areas-ref`);
          return (this.checked === true)
            ? (storeArea.disabled = null, storeAreaRef.hidden = false)
            : (storeArea.disabled = 'disabled', storeAreaRef.hidden = true)
        })
      });

  //- mixins can accept a parameter, in this case the empty object `item` by default, and which you can pass from the template that calls the mixin an object with whatever data; the data of which can be used, in this case `#{item.name}`
